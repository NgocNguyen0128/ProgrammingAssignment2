## Put comments here that give an overall description of what your
## functions do

## Write a short comment describing this function
## makeCacheMatrix: This function creates a special matrix object than can cache its inverse

makeCacheMatrix <- function(x = matrix()) {## define x as a invertible square matrix
inv <- NULL
set <- function(y){## set the matrix
		x <<- y
		inv <<- NULL
}
		get<-function() x ## get the matrix
		setinverse <- function(inverse) inv <<- inverse ## set the inverse of the matrix
		getinverse <- function() inv ## get the inverse of the matrix
		list(set = set,
		     get = get,
	             setinverse = setinverse,
	             getinverse = getinverse) ## use this as input to cacheSolve
}


## Write a short comment describing this function
## cacheSolve: This function computes the inverse of the special matrix returned by makeCacheMatrix above.
## If the inverse has already calculated (and the matrix has not changed), then the cachSolve should retrieve 
## the inverse from the cache.

cacheSolve <- function(x, ...) { ## Return a matrix that is the inverse of 'x'
			inv <- x$getinverse() ## if the inverse has already been calculated, then get the value of the inverse from cacheSolve
			if(!is.null(inv)) {
				message("getting cached data")
				return(inv)
			}
			data <- x$get() ## otherwise get/ calculate the value of the inverse from cacheSolve
			inv <- solve(data, ...)
			x$setinverse(inv) ##set the value of the inverse from cacheSolve
			inv
}
